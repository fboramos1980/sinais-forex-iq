import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf
import ta
import time

st.set_page_config(page_title="Sinais Forex", layout="wide", initial_sidebar_state="expanded")

# Estilo Dark Mode
st.markdown("""
<style>
body {
    background-color: #121212;
    color: white;
}
section.main > div {
    background-color: #1e1e1e;
}
</style>
""", unsafe_allow_html=True)

st.title("üìà Sinais Forex - RSI, MACD & Bandas de Bollinger")

# Sele√ß√£o do par Forex
pares = ["EURUSD=X", "GBPUSD=X", "USDJPY=X", "AUDUSD=X", "USDCAD=X"]
par = st.sidebar.selectbox("Selecione o par Forex", pares, index=0)

# Sele√ß√£o do timeframe
timeframes = {"M1": "1m", "M5": "5m", "M15": "15m"}
tf_key = st.sidebar.selectbox("Selecione o timeframe", list(timeframes.keys()), index=0)
tf = timeframes[tf_key]

st.sidebar.markdown("---")
st.sidebar.markdown("Atualiza√ß√£o autom√°tica a cada 60 segundos")

@st.cache_data(ttl=60)
def baixar_dados(par, periodo="1d", intervalo="1m"):
    dados = yf.download(tickers=par, period=periodo, interval=intervalo, progress=False)
    return dados

def calcula_indicadores(df):
    df = df.copy()
    df["RSI"] = ta.momentum.rsi(df["Close"], window=14)
    macd = ta.trend.MACD(df["Close"])
    df["MACD"] = macd.macd()
    df["MACD_signal"] = macd.macd_signal()
    df["bb_banda_sup"] = ta.volatility.BollingerBands(df["Close"]).bollinger_hband()
    df["bb_banda_inf"] = ta.volatility.BollingerBands(df["Close"]).bollinger_lband()
    return df

def gera_sinal(df):
    ultimo = df.iloc[-1]
    sinal = ""
    # Sinal Call se RSI < 30, MACD > Signal e Close abaixo da banda inferior
    if ultimo["RSI"] < 30 and ultimo["MACD"] > ultimo["MACD_signal"] and ultimo["Close"] < ultimo["bb_banda_inf"]:
        sinal = "CALL"
    # Sinal Put se RSI > 70, MACD < Signal e Close acima da banda superior
    elif ultimo["RSI"] > 70 and ultimo["MACD"] < ultimo["MACD_signal"] and ultimo["Close"] > ultimo["bb_banda_sup"]:
        sinal = "PUT"
    else:
        sinal = "AGUARDANDO"
    return sinal

placeholder = st.empty()

while True:
    df = baixar_dados(par, periodo="1d", intervalo=tf)
    df = calcula_indicadores(df)
    sinal = gera_sinal(df)
    
    with placeholder.container():
        st.subheader(f"Par: {par.replace('=X','')} - Timeframe: {tf_key}")
        st.write(df.tail(10)[["Close", "RSI", "MACD", "MACD_signal", "bb_banda_sup", "bb_banda_inf"]])
        st.markdown(f"### Sinal Atual: **{sinal}**")
        st.markdown("---")
        st.caption("Dados atualizados automaticamente a cada 60 segundos.")
    
    time.sleep(60)
streamlit
pandas
numpy
yfinance
ta
